package com.seu.magiccamera;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import com.seu.magiccamera.activity.AlbumActivity;
import com.seu.magiccamera.activity.CameraActivity;

import org.opencv.android.OpenCVLoader;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import pub.devrel.easypermissions.AfterPermissionGranted;
import pub.devrel.easypermissions.AppSettingsDialog;
import pub.devrel.easypermissions.EasyPermissions;

/**
 * The entry of the application.
 *
 * the application starts by checking all permissions and then start
 * activities according to user's choice.
 */

public class MainActivity extends Activity implements EasyPermissions.PermissionCallbacks,
                                                      EasyPermissions.RationaleCallbacks {

    private static final String TAG = "MainActivity";
    private static final String[] CAMERA_AND_INTERNET = {Manifest.permission.CAMERA,
            Manifest.permission.INTERNET};
    private static final int CAMERA_INTERNET_PERM = 128;
    private static final int READ_EXTERNAL_STORAGE_PERM = 129;

    /**
     * Default initialisation method.
     *
     * @param savedInstanceState
     *
     * This method is called when MainActivity is instanced.
     */

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // set a listener for camera button to check permission for accessing camera
        findViewById(R.id.button_camera).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                cameraTask();
            }
        });

        //set a listener for camera button to check permission for accessing photo gallery
        findViewById(R.id.button_album).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                albumTask();
            }
        });

        initOpenCV();
    }

    /**
     * Auto called for checking permissions.
     *
     * @param requestCode autogenerated value to identify the request
     * @param permissions the type of permissions requested
     * @param grantResults the results of the request
     */

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        // EasyPermissions handles the request result.
        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);
    }

    /**
     * The method starts activities requested.
     *
     * @param id the id of activities. They are registered on layout xml files
     */

    private void startActivity(int id) {
        switch (id) {
            case R.id.button_camera:
                startActivity(new Intent(this, CameraActivity.class));
                break;
            case R.id.button_album:
                startActivity(new Intent(this, AlbumActivity.class));
            default:
                break;
        }
    }

    private void initOpenCV(){
        boolean result = OpenCVLoader.initDebug();
        if(result){
            Log.i(TAG, "initOpenCV success...");
        } else {
            Log.e(TAG, "initOpenCV fail...");
        }
    }

    /**
     * Check if the permission of the camera is granted.
     *
     * @return a boolean value to show the result
     */

    private boolean hasCameraAndInternetPermission() {
        return EasyPermissions.hasPermissions(this, CAMERA_AND_INTERNET);
    }

    /**
     * Check if the permission of reading external storage is granted.
     *
     * @return a boolean value to show the result
     */

    private boolean hasReadStoragePermission() {
        return EasyPermissions.hasPermissions(this, Manifest.permission.READ_EXTERNAL_STORAGE);
    }

    /**
     * Check if the permission of writing external storage is granted.
     *
     * @return a boolean value to show the result
     */

    private boolean hasWriteStoragePermission() {
        return EasyPermissions.hasPermissions(this, Manifest.permission.WRITE_EXTERNAL_STORAGE);
    }

    /**
     * This method deals with the logic of camera button. If camera permission
     * is granted, camera activity is displayed. Otherwise the permission should
     * be requested.
     */

    @AfterPermissionGranted(CAMERA_INTERNET_PERM)
    public void cameraTask() {
        if (hasCameraAndInternetPermission()) {
            startActivity(R.id.button_camera);
        } else {
            Log.e(TAG, "Camera and Internet permission denied.");
            EasyPermissions.requestPermissions(
                    this,
                    getString(R.string.rationale_camera),
                    CAMERA_INTERNET_PERM,
                    CAMERA_AND_INTERNET);
        }
    }

    /**
     * This method deals with the logic of album button. If storage permission
     * is granted, album activity is displayed. Otherwise the permission should
     * be requested.
     */

    @AfterPermissionGranted(READ_EXTERNAL_STORAGE_PERM)
    public void albumTask() {
        if (hasReadStoragePermission()) {
            startActivity(R.id.button_album);
        } else {
            Log.e(TAG, "Read external storage permission denied.");
            EasyPermissions.requestPermissions(
                    this,
                    getString(R.string.rationale_read_external_storage),
                    READ_EXTERNAL_STORAGE_PERM,
                    Manifest.permission.READ_EXTERNAL_STORAGE);
        }
    }

    /**
     * The method handles the situation when any permission is granted. The event
     * is recorded for validating and testing.
     *
     * @param requestCode autogenerated value to identify the request
     * @param perms a list of permissions granted
     */

    @Override
    public void onPermissionsGranted(int requestCode, @NonNull List<String> perms) {
        Log.d(TAG, "onPermissionsGranted:" + requestCode + ":" + perms.size());
    }

    /**
     * The method handles the situation when any permission is denied. The event
     * is recorded for further handling.
     *
     * @param requestCode autogenerated value to identify the request
     * @param perms a list of permissions denied
     */

    @Override
    public void onPermissionsDenied(int requestCode, @NonNull List<String> perms) {
        Log.d(TAG, "onPermissionsDenied:" + requestCode + ":" + perms.size());

        // Check whether the user denied any permissions and checked "NEVER ASK AGAIN."
        // This will display a dialog directing them to enable the permission in app settings.
        if (EasyPermissions.somePermissionPermanentlyDenied(this, perms)) {
            new AppSettingsDialog.Builder(this).build().show();
        }
    }

    /**
     * The method deals with the action when user returned from other layout
     *
     * @param requestCode autogenerated value to identify the request
     * @param resultCode autogenerated value to identify the result
     * @param data data from other activities
     */

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == AppSettingsDialog.DEFAULT_SETTINGS_REQ_CODE) {
            String yes = getString(R.string.yes);
            String no = getString(R.string.no);

            // Action after user returned from app settings screen.
            Toast.makeText(
                    this,
                    getString(R.string.returned_from_app_settings_to_activity,
                            hasCameraAndInternetPermission() ? yes : no,
                            hasReadStoragePermission() ? yes : no,
                            hasWriteStoragePermission() ? yes : no),
                    Toast.LENGTH_LONG)
                    .show();
        }
    }

    /**
     * The method is called when the rationale is prompted and user press "OK"
     *
     * @param requestCode autogenerated value to identify the request
     */

    @Override
    public void onRationaleAccepted(int requestCode) {
        Log.d(TAG, "onRationaleAccepted:" + requestCode);
    }

    /**
     * The method is called when the rationale is prompted and user press "Cancel"
     *
     * @param requestCode autogenerated value to identify the request
     */

    @Override
    public void onRationaleDenied(int requestCode) {
        Log.d(TAG, "onRationaleDenied:" + requestCode);
    }
}
